{"version":3,"sources":["App.js","newApp.js","Movie.js","Video.js","index.js"],"names":["Food","name","rating","prototype","PropTypes","string","isRequired","App","React","Component","Movie","title","summary","poster","year","genres","className","src","alt","map","genre","index","key","slice","Video","state","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","movie","id","medium_cover_image","ReactDOM","render","document","getElementById"],"mappings":"2PAEA,SAASA,EAAT,GAA8B,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,OAIrB,OAAO,6BAAK,4BAAKA,EAAL,QAAqB,uCAAaD,IAuB9CD,EAAKG,UAAY,CACfF,KAAMG,IAAUC,OAAOC,WACvBJ,OAAQE,IAAUC,OAAOC,YAIZC,I,sCChCMC,IAAMC,U,sCCqBZC,MArBf,YAAuD,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,OAC1C,OAAO,yBAAKC,UAAU,SAClB,yBAAKC,IAAKJ,EAAQK,IAAKP,EAAOA,MAAOA,IACzC,yBAAKK,UAAU,cACX,wBAAIA,UAAU,gBAAgBL,GAC9B,wBAAIK,UAAU,cAAcF,GAC5B,wBAAIE,UAAU,iBAAiBD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAkB,wBAAIC,IAAMD,EAAOL,UAAU,iBAAiBI,OACxG,uBAAGJ,UAAU,kBAAkBJ,EAAQW,MAAM,EAAE,KAA/C,UC0BOC,G,iNA7BXC,MAAO,CACHC,WAAY,EACZC,OAAS,I,EAEbC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC4BE,IAAMC,IAAI,6DADtC,gBACWL,EADX,EACDM,KAAMA,KAAMN,OACnB,EAAKO,SAAS,CAACP,SAASD,WAAU,IAF1B,sC,mFAQRS,KAAKP,c,+BAEA,IAAD,EACyBO,KAAKV,MAA3BC,EADH,EACGA,UAAYC,EADf,EACeA,OACnB,OAAO,6BAASX,UAAU,aAAaU,EAAY,yBAAKV,UAAU,UAAS,0BAAMA,UAAU,gBAAhB,eAC3E,yBAAKA,UAAW,UACXW,EAAOR,KAAK,SAAAiB,GAAK,OAClB,kBAAC,EAAD,CAAOd,IAAKc,EAAMC,GAAGA,GAAID,EAAMC,GAAI1B,MAAOyB,EAAMzB,MAAOC,QAASwB,EAAMxB,QAASC,OAAQuB,EAAME,mBAAoBxB,KAAMsB,EAAMtB,KAAMC,OAAQqB,EAAMrB,kB,GApBzIP,IAAMC,YCG1B8B,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,W","file":"static/js/main.f3f08299.chunk.js","sourcesContent":["import React from 'react';// 이거 선언안하며 밑에 return <div>이것들 이해 못함\nimport PropTypes from 'prop-types';\nfunction Food({name, rating}){//저 밑에서 선언한 prop를 가져올수 있다.\n  // props.fav === {fav} 이다.\n  //{fav} 는 props.fav를 nice하게 가져오기위한 방법.\n  //console.log(prop); {}이게 props라고 생각하면 편함\nreturn <div><h4>{rating}/5.0</h4><h1>hey i'm {name}</h1></div>\n}\n//props들은 해당 jsx의 argument로 간다. \n\n//food fav를 자동으로 추가하기 위하여 배열을 만든다\n//문제.. propTypes에 string을 추가하였는데 any타입은 number, string 안가린다.\nconst foodLike = [{id: 1 ,name:\"치킨\",rating: 5 },{id: 2 ,name:\"피자\",rating: 4.5},{id:3,name:\"커피\",rating:3}];\n//id는 react오류를 위해 추가한것인데 key prop에 넣어줘서 각 component는 유니크하다고 선언해줘야한다고함.\nfunction App() {//jsx는 대문자로시작\n  return (\n    <div className=\"App\">\n      \n        hello;\n        {foodLike.map(renderFood)}\n      \n    </div>\n  );\n}\nfunction renderFood(some){\n  //some => <Food name={some.name}/>\n  return <Food key ={some.id} name={some.name} rating = {some.rating}/>\n  //name key등props가 내가 가지고 있는 props들을 체크하는 로직도 만들어줘야한다고함.\n}\nFood.prototype = {\n  name: PropTypes.string.isRequired,\n  rating: PropTypes.string.isRequired//isrequired가 없으면 error가 나지 않음. 뭐가오든 상관안쓰기때문\n};\n//Food 컴포넌트에 fav이름에 kimchi라는 value를 가진 프로퍼티를 줌. 이 prop를 function에서 매개변수로 사용가능하다.\n//react => 그곳에 쓰는 모든것을 생성함.\nexport default App; //만든후에 export해야함\n ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NewApp extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(\"constructor\");\r\n    }\r\n    state = {\r\n        count : 0\r\n    };\r\n    //add = () => this.setState({count: this.state.count+1});\r\n    // this.state.count 는 멋지지 않으므로 다음과 같은 코드를 사용한다.\r\n    add = () => this.setState(current => ({count: current.count+1}));\r\n    minus = () => this.setState(current => ({count: current.count-1}));\r\n    //state에는 바뀌어야할 데이터를 넣는다. (class에서 사용가능)\r\n    //state안의 값을 변경할때는 반드시 render를 호출하는 함수를 추가해줘야함.!! setState가 자동으로 render호출해줌.\r\n    componentDidMount(){\r\n        console.log(\"componnet rendered\");\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"componet updated\");\r\n    }\r\n    componentWillUnmount(){\r\n        console.log(\"component is dead\");\r\n    }\r\n    render(){\r\n        console.log(\"componnet rendering!\");\r\n    return <div>\r\n        <h1>number is : {this.state.count}</h1>\r\n        <button onClick={this.add}>add</button>\r\n        <button onClick={this.minus}>minus</button>\r\n        </div>;\r\n    }\r\n}\r\n//react 는 자동적으로 classcomponent 의 render method를 실행함.자동으로!\r\nexport default NewApp; ","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nfunction Movie({title, summary, poster, year ,genres}){\r\n    return <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title}/>\r\n    <div className=\"movie_data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie_year\">{year}</h5>\r\n        <ul className=\"movie__genres\">{genres.map((genre, index) => <li key ={index} className=\"genres__genre\">{genre}</li>)}</ul>\r\n        <p className=\"movie__summary\">{summary.slice(0,180)}...</p>\r\n    </div>\r\n    </div>;\r\n}\r\n\r\nMovie.propTypes = {\r\n    id :PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport Movie from './Movie';\r\nimport \"./App.css\";\r\n\r\nclass Video extends React.Component{\r\n    state ={\r\n        isLoading : true,\r\n        movies : []\r\n    };\r\n    getMovies = async() => {\r\n        const {data:{data:{movies}}} =await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        this.setState({movies , isLoading:false});// 기다린후 실행.\r\n    }\r\n    componentDidMount(){\r\n        // setTimeout(()=>{\r\n        //     this.setState({isLoading: false, someting: true})        \r\n        // },6000)  \r\n        this.getMovies();\r\n    }\r\n    render(){\r\n        const {isLoading , movies} = this.state;\r\n        return <section className=\"container\">{isLoading ? <div className=\"loader\"><span className=\"loader__text\">Loading...</span></div>:\r\n        <div className =\"movies\">\r\n            {movies.map( movie => \r\n            <Movie key={movie.id}id={movie.id} title={movie.title} summary={movie.summary} poster={movie.medium_cover_image} year={movie.year} genres={movie.genres}/>\r\n        )}\r\n        </div>\r\n       }\r\n\r\n        </section>\r\n    }\r\n\r\n}\r\n\r\nexport default Video; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport NewApp from './newApp';\nimport Video from './Video';\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n//ReactDOM.render(<NewApp />, document.getElementById('root'));\n\nReactDOM.render(<Video />, document.getElementById('root'));\n//ReactDom.render는 app의 모든내용(component)을 root object 안에 넣을려고함(render)\n//react가 빠른이유는 소스코드에 처음부터 모든 HTML을넣지않는다. 1.빈 INDEX.HTML을 로드 한후에, 2.작성한 component를 rendering한다.\n//소스코드상 존재하지 않으므로 virtual document object model이라고불림.\n"],"sourceRoot":""}